{"version":3,"sources":["content/content.js","Posts.js","Page.js","NavBar.js","serviceWorker.js","index.js"],"names":["posts","title","description","Posts","props","state","isLoaded","postList","map","post","postView","className","key","push","this","setState","React","Component","Page","NavBar","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iOAWeA,EAXF,CACT,CACIC,MAAO,iBACPC,YAAa,4DAEjB,CACID,MAAO,iBACPC,YAAa,sCCJAC,E,kDACjB,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAO,CAACL,MAAO,GAAIM,UAAU,GAFpB,E,gEAKd,IAAMC,EAAU,GAChBP,EAAMQ,KAAI,SAAAC,GACN,IAAMC,EAAU,yBAAKC,UAAW,OAAOC,IAAMH,EAAKR,OAC9C,wBAAIU,UAAW,SACVF,EAAKR,OAEV,uBAAGU,UAAW,eACTF,EAAKP,cAGdK,EAASM,KAAKH,MAElBI,KAAKC,SAAS,CAACf,MAAOO,EAAUD,UAAU,M,+BAI1C,OAAGQ,KAAKT,MAAMC,SAEN,yBAAKK,UAAW,gBACXG,KAAKT,MAAML,OAKZ,iD,GA9BegB,IAAMC,WCS1BC,MATf,WACE,OACE,yBAAKP,UAAU,iBACb,wBAAIA,UAAW,cAAf,kBACA,kBAAC,EAAD,QCOSQ,EAZA,WACX,OACI,yBAAKR,UAAW,kBACZ,wBAAIA,UAAW,eACX,4BAAI,uBAAGS,KAAM,cAAcT,UAAW,iBAAlC,cACJ,4BAAI,uBAAGS,KAAM,aAAaT,UAAW,iBAAjC,cACJ,4BAAI,uBAAGS,KAAM,WAAWT,UAAW,iBAA/B,iBCIAU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.431e24d2.chunk.js","sourcesContent":["const posts= [\n    {\n        title: 'Road to FSAE 1',\n        description: 'As the team prepares for the 2021 competition season....'\n    },\n    {\n        title: 'Embedded App 1',\n        description: 'I made an embedded application (:'\n    },\n]\n\nexport default posts;\n","import React from 'react';\nimport posts from './content/content';\n\nexport default class Posts extends React.Component {\n    constructor(props){\n        super(props)\n        this.state= {posts: [], isLoaded: false}\n    }\n    componentDidMount(){\n        const postList= []\n        posts.map(post => {\n            const postView= <div className= \"post\" key= {post.title}>\n                <h1 className= \"title\">\n                    {post.title}\n                </h1>\n                <p className= \"description\">\n                    {post.description}\n                </p>\n            </div>\n            postList.push(postView);\n        })\n        this.setState({posts: postList, isLoaded: true})\n\n    }\n    render(){\n        if(this.state.isLoaded)\n            return (\n                <div className= \"recent-posts\">\n                    {this.state.posts}\n                </div>\n                \n            );\n        else\n            return (<div> Loading... </div>);\n    }\n}","import React from 'react';\nimport Posts from './Posts';\n\nfunction Page() {\n  return (\n    <div className=\"page is-light\">\n      <h1 className= \"page-title\"> Recent Posts </h1>\n      <Posts/>\n    </div>\n  );\n}\n\nexport default Page;\n","import React from 'react';\n\nconst NavBar = () => {\n    return (\n        <nav className= \"navbar is-dark\">\n            <ul className= \"navbar-list\">\n                <li><a href= \"twitter.com\" className= \"navbar-member\">About Me </a></li>\n                <li><a href= \"whoops.com\" className= \"navbar-member\">Projects </a></li>\n                <li><a href= \"nope.com\" className= \"navbar-member\">Thoughts </a></li>\n            </ul>\n        </nav>\n    );\n}\n\nexport default NavBar;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Page from './Page';\nimport NavBar from './NavBar';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <NavBar />\n    <Page />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n// <Sidebar height= '100vh' />\n// <Page />\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}